-- Create Tables
CREATE TABLE ASSOCIATION (
    name VARCHAR2(255) NOT NULL,
    web VARCHAR2(255),
    discipline_code INT,
    community INT,

    -- Primary key.
    PRIMARY KEY (name)
);

CREATE TABLE DISCIPLINES (
    code INT GENERATED BY DEFAULT AS IDENTITY, -- 'code' is an autoincrementable column.
    name VARCHAR2(255) NOT NULL
    CONSTRAINT DISCIPLINES_CHECK_NAME CHECK (name IN ('Software Engineering', 'Artificial Intelligence', 'Security', 'Systems Architecture', 'Human-Computer Interaction')),

    PRIMARY KEY (code)
);

CREATE TABLE RESEARCH_GROUP (
    code INT GENERATED BY DEFAULT AS IDENTITY,
    acronym VARCHAR2(255) NOT NULL,
    name VARCHAR2(255) NOT NULL,
    web VARCHAR2(255),

    PRIMARY KEY (code)
);

CREATE TABLE GROUP_DISCIPLINE (
    group_code INT,
    discipline_code INT,

    PRIMARY KEY (group_code, discipline_code)
);

CREATE TABLE MEMBERS (
    code INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
    name VARCHAR2(255) NOT NULL,
    surname VARCHAR2(255) NOT NULL,
    email VARCHAR2(255) NOT NULL CONSTRAINT MEMBERS_CHECK_EMAIL CHECK (email LIKE '%@%'),
    affiliation VARCHAR2(255) NOT NULL,
    code_category INT,
    web VARCHAR2(2000),
    type VARCHAR2(255) NOT NULL CONSTRAINT MEMBERS_CHECK_TYPE CHECK (type IN ('Confederation', 'Association')),
    research_group_code INT,
    start_date DATE NOT NULL,
    end_date DATE,
    
    CHECK (end_date > start_date OR end_date IS NULL),
    PRIMARY KEY (code)
);

CREATE TABLE MEMBERS_ASSOCIATION (
    association_name VARCHAR2(255) NOT NULL,
    member_code INT NOT NULL,
    ass_number INT NOT NULL,

    PRIMARY KEY (association_name, member_code)
);

CREATE TABLE BOARD (
    code INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR2(255) NOT NULL CONSTRAINT BOARD_CHECK_NAME CHECK (Name IN ('president', 'vice-president', 'secretary', 'treasurer')),

    PRIMARY KEY (code)
);

CREATE TABLE BOARD_ASS (
    name_association VARCHAR2(255) NOT NULL, 
    code_member INT NOT NULL,                
    code_board INT NOT NULL,                 

    PRIMARY KEY (name_association, code_member)
);

CREATE TABLE BOARD_CONF (
    code_member INT NOT NULL,
    code_board INT NOT NULL,

    PRIMARY KEY (code_member)
);

CREATE TABLE FEE (
    code INT GENERATED BY DEFAULT AS IDENTITY,
    type VARCHAR2(255) NOT NULL CONSTRAINT FEE_CHECK_TYPE CHECK (Type IN ('memberAss', 'noMemberAss', 'student', 'noStudent')),
    fee NUMBER(8,2) NOT NULL CONSTRAINT FEE_CHECK_FEE CHECK (fee >= 0),

    PRIMARY KEY (code)
);

CREATE TABLE MEMBERS_FEE (
    code_member INT NOT NULL,
    code_fee INT NOT NULL,
    year NUMBER(4) NOT NULL,

    PRIMARY KEY (code_member, code_fee, year)
);

CREATE TABLE CATEGORY (
    code INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR2(255) NOT NULL CONSTRAINT CATEGORY_CHECK_NAME CHECK (name IN ('PhD student', 'PhD professor', 'assistant professor', 'full professor', 'retired')),

    PRIMARY KEY (code)
);

CREATE TABLE PRIZE (
    prize_category VARCHAR2(255) NOT NULL CONSTRAINT PRIZE_CHECK_PRIZE_CATEGORY CHECK (prize_category IN ('senior', 'student')),
    code_member INT NOT NULL,
    year NUMBER(4) NOT NULL,

    PRIMARY KEY (prize_category, code_member, year)
);

CREATE TABLE NETWORKS_CONFEDERATION (
    code_social_network INT NOT NULL,
    URI VARCHAR2(2000) NOT NULL,
    community INT NOT NULL,

    PRIMARY KEY (code_social_network)
);

CREATE TABLE SOCIAL_NETWORK (
    code INT, 
    name VARCHAR2(255) NOT NULL CONSTRAINT SOCIAL_NETWORK_CHECK_NAME CHECK (name IN ('Twitter', 'LinkedIn', 'Instagram')),

    PRIMARY KEY (code)
);

CREATE TABLE NETWORKS_ASSOCIATION (
    code_social_network INT NOT NULL,
    association_name VARCHAR2(255) NOT NULL,
    URI VARCHAR2(2000) NOT NULL,

    PRIMARY KEY (code_social_network, association_name)
);

CREATE OR REPLACE TRIGGER check_year_before_insert_or_update_members_fee
BEFORE INSERT OR UPDATE OF year ON MEMBERS_FEE
FOR EACH ROW
BEGIN
    IF :NEW.year < 1900 OR :NEW.year > EXTRACT(YEAR FROM SYSDATE) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Year is out of the valid range.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER check_year_before_insert_or_update_prize
BEFORE INSERT OR UPDATE OF year ON PRIZE
FOR EACH ROW
BEGIN
    IF :NEW.year < 1900 OR :NEW.year > EXTRACT(YEAR FROM SYSDATE) THEN
        RAISE_APPLICATION_ERROR(-20002, 'Year is out of the valid range.');
    END IF;
END;
/
